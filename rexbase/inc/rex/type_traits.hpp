#pragma once

#include "rex/traits/integral_constant.hpp"

#include "rex/traits/alignment_of.hpp"
#include "rex/traits/common_type.hpp"
#include "rex/traits/conditional.hpp"
#include "rex/traits/conjunction.hpp"
#include "rex/traits/decay.hpp"
#include "rex/traits/disjunction.hpp"
#include "rex/traits/enable_if.hpp"
#include "rex/traits/extent.hpp"
#include "rex/traits/is_abstract.hpp"
#include "rex/traits/is_aggregate.hpp"
#include "rex/traits/is_arithmetic.hpp"
#include "rex/traits/is_array.hpp"
#include "rex/traits/is_class.hpp"
#include "rex/traits/is_compund.hpp"
#include "rex/traits/is_const_volatile.hpp"
#include "rex/traits/is_empty.hpp"
#include "rex/traits/is_enum.hpp"
#include "rex/traits/is_final.hpp"
#include "rex/traits/is_floating_point.hpp"
#include "rex/traits/is_function.hpp"
#include "rex/traits/is_fundamental.hpp"
#include "rex/traits/is_integral.hpp"
#include "rex/traits/is_member_pointer.hpp"
#include "rex/traits/negation.hpp"
#include "rex/traits/is_null_pointer.hpp"
#include "rex/traits/is_object.hpp"
#include "rex/traits/is_pointer.hpp"
#include "rex/traits/is_polymorphic.hpp"
#include "rex/traits/is_reference.hpp"
#include "rex/traits/is_same.hpp"
#include "rex/traits/is_scalar.hpp"
#include "rex/traits/is_signed.hpp"
#include "rex/traits/is_standard_layout.hpp"
#include "rex/traits/is_trivial.hpp"
#include "rex/traits/is_union.hpp"
#include "rex/traits/is_void.hpp"
#include "rex/traits/rank.hpp"
#include "rex/traits/underlying_type.hpp"